// <auto-generated />
using System;
using EParking.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EParking.Migrations
{
    [DbContext(typeof(EParkingContext))]
    partial class EParkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EParking.Models.Administrator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("EParking.Models.Cjenovnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CijenaGodisnjeKarte")
                        .HasColumnType("float");

                    b.Property<double>("CijenaMjesecneKarte")
                        .HasColumnType("float");

                    b.Property<double>("DnevnaCijenaSat")
                        .HasColumnType("float");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NocnaCijenaSat")
                        .HasColumnType("float");

                    b.Property<double>("Popust")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Cjenovnik");
                });

            modelBuilder.Entity("EParking.Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojMobitela")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImePrezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Korisnik");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Korisnik");
                });

            modelBuilder.Entity("EParking.Models.ParkingLokacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrojSlobodnihMjesta")
                        .HasColumnType("int");

                    b.Property<int>("CjenovnikId")
                        .HasColumnType("int");

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CjenovnikId");

                    b.ToTable("ParkingLokacija");
                });

            modelBuilder.Entity("EParking.Models.Transakcija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Iznos")
                        .HasColumnType("float");

                    b.Property<int>("ParkingLokacijaID")
                        .HasColumnType("int");

                    b.Property<int>("VoziloID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VrijemeDolaska")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VrijemeOdlaska")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ParkingLokacijaID");

                    b.HasIndex("VoziloID");

                    b.ToTable("Transakcija");
                });

            modelBuilder.Entity("EParking.Models.Vlasnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImePrezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkingLokacijaID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Prihodi")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ParkingLokacijaID");

                    b.ToTable("Vlasnik");
                });

            modelBuilder.Entity("EParking.Models.Vozilo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojMotora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojSasije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojTablice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("ModelAuta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Vozilo");
                });

            modelBuilder.Entity("EParking.Models.Zahtjev", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("VlasnikID")
                        .HasColumnType("int");

                    b.Property<int>("VoziloID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VlasnikID");

                    b.HasIndex("VoziloID");

                    b.ToTable("Zahtjev");
                });

            modelBuilder.Entity("EParking.Models.Clan", b =>
                {
                    b.HasBaseType("EParking.Models.Korisnik");

                    b.Property<int>("RezervisanoParkingMjesto")
                        .HasColumnType("int");

                    b.Property<int>("StatusClanarine")
                        .HasColumnType("int");

                    b.Property<int>("TipClanarine")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Clan");
                });

            modelBuilder.Entity("EParking.Models.Gost", b =>
                {
                    b.HasBaseType("EParking.Models.Korisnik");

                    b.HasDiscriminator().HasValue("Gost");
                });

            modelBuilder.Entity("EParking.Models.ParkingLokacija", b =>
                {
                    b.HasOne("EParking.Models.Cjenovnik", "Cjenovnik")
                        .WithMany("ParkingLokacije")
                        .HasForeignKey("CjenovnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EParking.Models.Transakcija", b =>
                {
                    b.HasOne("EParking.Models.ParkingLokacija", "ParkingLokacija")
                        .WithMany()
                        .HasForeignKey("ParkingLokacijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EParking.Models.Vozilo", "Vozilo")
                        .WithMany()
                        .HasForeignKey("VoziloID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EParking.Models.Vlasnik", b =>
                {
                    b.HasOne("EParking.Models.ParkingLokacija", "ParkingLokacija")
                        .WithMany()
                        .HasForeignKey("ParkingLokacijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EParking.Models.Vozilo", b =>
                {
                    b.HasOne("EParking.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EParking.Models.Zahtjev", b =>
                {
                    b.HasOne("EParking.Models.Vlasnik", "Vlasnik")
                        .WithMany("Zahtjevi")
                        .HasForeignKey("VlasnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EParking.Models.Vozilo", "Vozilo")
                        .WithMany()
                        .HasForeignKey("VoziloID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
