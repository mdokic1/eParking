@model EParkingFacade

@{
    ViewData["Title"] = "EParking";
}

    <head>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
        <style>
            /* Set the size of the div element that contains the map */
            #map {
                height: 800px; 
                width: 90%;
            }
            .container-fluid {
                position: relative;
            }

            #btnPay {
                position: absolute;
                top: 115px;
                right: 10px;
                width: 185px;
                height: 100px;
            }

            #btnRoute {
                position: absolute;
                top: 0;
                right: 10px;
                width: 185px;
                height: 100px;
            }
            #btnClearRoute {
                position: absolute;
                bottom: 15px;
                right: 10px;
                width: 185px;
                height: 100px;
            }
        </style>
    </head>
    <body>

        <div id="map"></div>
        <script>
            //kreirnje ovog niza pravi problem!!!
            var parkinzi = @Html.Raw(ViewBag.Markeri);
            var map;
            // Initialize and add the map
            function initMap() {
               // The location of Sarajevo
                var sarajevo = { lat: 43.8563, lng: 18.4131 };
                // The map, centered at Sarajevo
                map = new google.maps.Map(
                    document.getElementById('map'), { zoom: 15, center: sarajevo });

                var parkingIcon =
                'https://developers.google.com/maps/documentation/javascript/examples/full/images/parking_lot_maps.png';

                var infoObj = [];
                for (var i = 0; i < parkinzi.length; i++) {
                    var contentString = '<h3>' + 'Naziv: ' + parkinzi[i].naziv + '</h3> ' +
                        '<h3>' + 'Adresa: ' + parkinzi[i].adresa + '</h3> ' +
                        '<h3>' + 'Cijena: ' + parkinzi[i].cijena + ' KM' + '</h3> ' +
                        '<h3>' + 'Slobodna mjesta: ' + parkinzi[i].slobodnaMjesta + '/' + parkinzi[i].kapacitet + '</h3>';
                    var myLatLng = new google.maps.LatLng(parkinzi[i].lat, parkinzi[i].lng);
                    const marker = new google.maps.Marker({
                        position: myLatLng,
                        icon: parkingIcon,
                        map: map
                    });
                    const infoWindow = new google.maps.InfoWindow({
                        content: contentString
                    });
                    marker.addListener('click', function () {
                        //zatvaranje starog info prozora
                        if (infoObj.length > 0) {
                            infoObj[0].set("marker", null);
                            infoObj[0].close();
                            infoObj[0].length = 0;
                        }
                        infoWindow.open(marker.get('map'), marker);
                        infoObj[0] = infoWindow;
                    });

                }

            }

            function calculateAndShowRoute() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        window.directionsService = new google.maps.DirectionsService();
                        window.directionsDisplay = new google.maps.DirectionsRenderer();
                        var request = {
                            origin: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
                            destination: new google.maps.LatLng(@Html.Raw(ViewBag.Latitude), @Html.Raw(ViewBag.Longitude)),
                            travelMode: 'DRIVING'
                        }
                        directionsDisplay.setMap(map);
                        directionsService.route(request, (result, status) => {
                            if (status == 'OK') {
                                directionsDisplay.setDirections(result);
                            }
                        });

                    });
                }

            }

            function removeRoute() {
                window.directionsDisplay.setDirections({ routes: [] });
            }

        </script>


        <button id="btnPay" type="button" class="btn btn-primary btn-lg">Pay</button>
        <button id="btnRoute" type="button" class="btn btn-primary btn-lg" onclick="calculateAndShowRoute()">Find route</button>
        <button id="btnClearRoute" type="button" class="btn btn-danger btn-lg" onclick="removeRoute()">Clear route</button>


        <script async defer
                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBd7K5-Z6imkbJEje_G9aPqEL65uUiOFfc&callback=initMap">
        </script>



        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js" integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI" crossorigin="anonymous"></script>
    </body>

